#pragma once

#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdarg.h>

#define SYM_TAB_SIZE	997
#define IDENTIFY_LEN	15
#define IND_OFFSET		2

#ifndef TRUE
#define TRUE 1
#endif

#ifndef FALSE
#define FALSE 0
#endif

#ifndef NULL
#define NULL 0
#endif

enum ParseTreeNodeType {
	UNARY_OPERATOR,
	UNARY_EXPRESSION,
	TYPE_SPECIFIER,
	TYPE_QUALIFIER_LIST,
	TYPE_QUALIFIER,
	TYPE_NAME,
	TRANSLATION_UNIT,
	STRUCT_DECLARATOR,
	STRUCT_DECLARATOR_LIST,
	SPECIFIER_QUALIFIER_LIST,
	STRUCT_DECLARATION,
	STRUCT_DECLARATION_LIST,
	STRUCT_OR_UNION,
	STRUCT_OR_UNION_SPECIFIER,
	STORAGE_CLASS_SPECIFIER,
	STATEMENT,
	STATIC_ASSERT_DECLARATION,
	SHIFT_EXPRESSION,
	STRING,
	SELECTION_STATEMENT,
	RELATIONAL_EXPRESSION,
	PROGRAM,
	PRIMARY_EXPRESSION,
	POSTFIX_EXPRESSION,
	POINTER,
	PARAMETER_DECLARATION,
	PARAMETER_LIST,
	PARAMETER_TYPE_LIST,
	MULTIPLICATIVE_EXPRESSION,
	LOGICAL_OR_EXPRESSION,
	LOGICAL_AND_EXPRESSION,
	LABELED_STATEMENT,
	JUMP_STATEMENT,
	ITERATION_STATEMENT,
	INITIALIZER_LIST,
	INITIALIZER,
	INIT_DECLARATOR,
	INIT_DECLARATOR_LIST,
	INCLUSIVE_OR_EXPRESSION,
	IDENTIFIER_LIST,
	GENERIC_ASSOCIATION,
	GENERIC_ASSOC_LIST,
	GENERIC_SELECTION,
	FUNCTION_SPECIFIER,
	FUNCTION_DEFINITION,
	EXTERNAL_DECLARATION,
	EXPRESSION_STATEMENT,
	EXPRESSION,
	EXCLUSIVE_OR_EXPRESSION,
	EQUALITY_EXPRESSION,
	ENUMERATOR,
	ENUMERATOR_LIST,
	ENUM_SPECIFIER,
	DIRECT_ABSTRACT_DECLARATOR,
	DIRECT_DECLARATOR,
	DESIGNATOR,
	DESIGNATOR_LIST,
	DESIGNATION,
	DECLARATION_LIST,
	DECLARATOR,
	DECLARATION_SPECIFIERS,
	DECLARATION,
	CONSTANT_EXPRESSION,
	CONSTANT,
	CONDITIONAL_EXPRESSION,
	COMPOUND_STATEMENT,
	CAST_EXPRESSION,
	BLOCK_ITEM,
	BLOCK_ITEM_LIST,
	ASSIGNMENT_OPERATOR,
	ASSIGNMENT_EXPRESSION,
	ARGUMENT_EXPRESSION_LIST,
	AND_EXPRESSION,
	ALIGNMENT_SPECIFIER,
	ADDITIVE_EXPRESSION,
	ABSTRACT_DECLARATOR
};

typedef struct abstract_syntax_tree AST;
typedef union _value_union value_union;
typedef struct _value value;
typedef char* String;

const String labels[] = {
	"UNARY_OPERATOR",
	"UNARY_EXPRESSION",
	"TYPE_SPECIFIER",
	"TYPE_QUALIFIER_LIST",
	"TYPE_QUALIFIER",
	"TYPE_NAME",
	"TRANSLATION_UNIT",
	"STRUCT_DECLARATOR",
	"STRUCT_DECLARATOR_LIST",
	"SPECIFIER_QUALIFIER_LIST",
	"STRUCT_DECLARATION",
	"STRUCT_DECLARATION_LIST",
	"STRUCT_OR_UNION",
	"STRUCT_OR_UNION_SPECIFIER"
	"STORAGE_CLASS_SPECIFIER",
	"STATEMENT",
	"STATIC_ASSERT_DECLARATION",
	"SHIFT_EXPRESSION",
	"STRING",
	"SELECTION_STATEMENT",
	"RELATIONAL_EXPRESSION",
	"PROGRAM",
	"PRIMARY_EXPRESSION",
	"POSTFIX_EXPRESSION",
	"POINTER",
	"PARAMETER_DECLARATION",
	"PARAMETER_LIST",
	"PARAMETER_TYPE_LIST",
	"MULTIPLICATIVE_EXPRESSION",
	"LOGICAL_OR_EXPRESSION",
	"LOGICAL_AND_EXPRESSION",
	"LABELED_STATEMENT",
	"JUMP_STATEMENT",
	"ITERATION_STATEMENT",
	"INITIALIZER_LIST",
	"INITIALIZER",
	"INIT_DECLARATOR",
	"INIT_DECLARATOR_LIST",
	"INCLUSIVE_OR_EXPRESSION",
	"IDENTIFIER_LIST",
	"GENERIC_ASSOCIATION",
	"GENERIC_ASSOC_LIST",
	"GENERIC_SELECTION",
	"FUNCTION_SPECIFIER",
	"FUNCTION_DEFINITION",
	"EXTERNAL_DECLARATION",
	"EXPRESSION_STATEMENT",
	"EXPRESSION",
	"EXCLUSIVE_OR_EXPRESSION",
	"EQUALITY_EXPRESSION",
	"ENUMERATOR",
	"ENUMERATOR_LIST",
	"ENUM_SPECIFIER",
	"DIRECT_ABSTRACT_DECLARATOR",
	"DIRECT_DECLARATOR",
	"DESIGNATOR",
	"DESIGNATOR_LIST",
	"DESIGNATION",
	"DECLARATION_LIST",
	"DECLARATOR",
	"DECLARATION_SPECIFIERS",
	"DECLARATION",
	"CONSTANT_EXPRESSION",
	"CONSTANT",
	"CONDITIONAL_EXPRESSION",
	"COMPOUND_STATEMENT",
	"CAST_EXPRESSION",
	"BLOCK_ITEM",
	"BLOCK_ITEM_LIST",
	"ASSIGNMENT_OPERATOR",
	"ASSIGNMENT_EXPRESSION",
	"ARGUMENT_EXPRESSION_LIST",
	"AND_EXPRESSION",
	"ALIGNMENT_SPECIFIER",
	"ADDITIVE_EXPRESSION",
	"ABSTRACT_DECLARATOR"
};

union _value_union {
	int i;
	int f;
	String s;
};

struct _value {
	value_union v;
	String use;
};

struct abstract_syntax_tree {
	value val;
	int node_identifier;
	AST* first;
	AST* second;
	AST* third;
	AST* fourth;
};

AST* make_node(value val, int _case, ...);
void print_tree(AST* tree);
int find_usage(AST* p, String _type[100], int i, String u);